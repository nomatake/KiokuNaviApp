// Mocks generated by Mockito 5.4.4 from annotations
// in kioku_navi/test/controllers/auth_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i6;
import 'package:get/get.dart' as _i4;
import 'package:kioku_navi/models/user.dart' as _i5;
import 'package:kioku_navi/repositories/user_repository.dart' as _i9;
import 'package:kioku_navi/services/api/auth_api.dart' as _i2;
import 'package:kioku_navi/services/auth/login_service.dart' as _i7;
import 'package:kioku_navi/services/auth/token_manager.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthApi_0 extends _i1.SmartFake implements _i2.AuthApi {
  _FakeAuthApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTokenManager_1 extends _i1.SmartFake implements _i3.TokenManager {
  _FakeTokenManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxn_2<T> extends _i1.SmartFake implements _i4.Rxn<T> {
  _FakeRxn_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_4<T> extends _i1.SmartFake
    implements _i4.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_5 extends _i1.SmartFake implements _i5.User {
  _FakeUser_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_6 extends _i1.SmartFake
    implements _i6.FlutterSecureStorage {
  _FakeFlutterSecureStorage_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginService extends _i1.Mock implements _i7.LoginService {
  @override
  _i2.AuthApi get authApi => (super.noSuchMethod(
        Invocation.getter(#authApi),
        returnValue: _FakeAuthApi_0(
          this,
          Invocation.getter(#authApi),
        ),
        returnValueForMissingStub: _FakeAuthApi_0(
          this,
          Invocation.getter(#authApi),
        ),
      ) as _i2.AuthApi);

  @override
  _i3.TokenManager get tokenManager => (super.noSuchMethod(
        Invocation.getter(#tokenManager),
        returnValue: _FakeTokenManager_1(
          this,
          Invocation.getter(#tokenManager),
        ),
        returnValueForMissingStub: _FakeTokenManager_1(
          this,
          Invocation.getter(#tokenManager),
        ),
      ) as _i3.TokenManager);

  @override
  _i4.Rxn<_i5.User> get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _FakeRxn_2<_i5.User>(
          this,
          Invocation.getter(#currentUser),
        ),
        returnValueForMissingStub: _FakeRxn_2<_i5.User>(
          this,
          Invocation.getter(#currentUser),
        ),
      ) as _i4.Rxn<_i5.User>);

  @override
  bool get isLocked => (super.noSuchMethod(
        Invocation.getter(#isLocked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Duration get lockoutRemaining => (super.noSuchMethod(
        Invocation.getter(#lockoutRemaining),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#lockoutRemaining),
        ),
        returnValueForMissingStub: _FakeDuration_3(
          this,
          Invocation.getter(#lockoutRemaining),
        ),
      ) as Duration);

  @override
  _i4.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onStart),
        ),
        returnValueForMissingStub: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i4.InternalFinalCallback<void>);

  @override
  _i4.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onDelete),
        ),
        returnValueForMissingStub: _FakeInternalFinalCallback_4<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i4.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<_i5.User> loginStudent({
    required String? studentId,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginStudent,
          [],
          {
            #studentId: studentId,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i5.User>.value(_FakeUser_5(
          this,
          Invocation.method(
            #loginStudent,
            [],
            {
              #studentId: studentId,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i5.User>.value(_FakeUser_5(
          this,
          Invocation.method(
            #loginStudent,
            [],
            {
              #studentId: studentId,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i5.User>);

  @override
  _i8.Future<_i5.User> loginParent({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginParent,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i5.User>.value(_FakeUser_5(
          this,
          Invocation.method(
            #loginParent,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i5.User>.value(_FakeUser_5(
          this,
          Invocation.method(
            #loginParent,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i5.User>);

  @override
  _i8.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i5.User?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i8.Future<_i5.User?>.value(),
        returnValueForMissingStub: _i8.Future<_i5.User?>.value(),
      ) as _i8.Future<_i5.User?>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i9.UserRepository {
  @override
  _i6.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_6(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFlutterSecureStorage_6(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i6.FlutterSecureStorage);

  @override
  _i8.Stream<_i5.User?> get userStream => (super.noSuchMethod(
        Invocation.getter(#userStream),
        returnValue: _i8.Stream<_i5.User?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.User?>.empty(),
      ) as _i8.Stream<_i5.User?>);

  @override
  _i8.Future<void> saveUser(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i5.User?> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i8.Future<_i5.User?>.value(),
        returnValueForMissingStub: _i8.Future<_i5.User?>.value(),
      ) as _i8.Future<_i5.User?>);

  @override
  _i8.Future<void> clearUser() => (super.noSuchMethod(
        Invocation.method(
          #clearUser,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
