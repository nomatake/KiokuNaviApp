// Mocks generated by Mockito 5.4.4 from annotations
// in kioku_navi/test/controllers/quiz_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i4;
import 'package:get/get.dart' as _i3;
import 'package:kioku_navi/models/question.dart' as _i6;
import 'package:kioku_navi/models/quiz_config.dart' as _i8;
import 'package:kioku_navi/models/quiz_session.dart' as _i10;
import 'package:kioku_navi/repositories/quiz_repository.dart' as _i9;
import 'package:kioku_navi/services/api/quiz_api.dart' as _i2;
import 'package:kioku_navi/services/quiz/answer_validator.dart' as _i11;
import 'package:kioku_navi/services/quiz/question_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuizApi_0 extends _i1.SmartFake implements _i2.QuizApi {
  _FakeQuizApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxBool_1 extends _i1.SmartFake implements _i3.RxBool {
  _FakeRxBool_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRxList_2<E> extends _i1.SmartFake implements _i3.RxList<E> {
  _FakeRxList_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_3<T> extends _i1.SmartFake
    implements _i3.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_4 extends _i1.SmartFake
    implements _i4.FlutterSecureStorage {
  _FakeFlutterSecureStorage_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuestionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionService extends _i1.Mock implements _i5.QuestionService {
  @override
  _i2.QuizApi get quizApi => (super.noSuchMethod(
        Invocation.getter(#quizApi),
        returnValue: _FakeQuizApi_0(
          this,
          Invocation.getter(#quizApi),
        ),
        returnValueForMissingStub: _FakeQuizApi_0(
          this,
          Invocation.getter(#quizApi),
        ),
      ) as _i2.QuizApi);

  @override
  _i3.RxBool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: _FakeRxBool_1(
          this,
          Invocation.getter(#isLoading),
        ),
        returnValueForMissingStub: _FakeRxBool_1(
          this,
          Invocation.getter(#isLoading),
        ),
      ) as _i3.RxBool);

  @override
  _i3.RxList<_i6.Question> get currentQuestions => (super.noSuchMethod(
        Invocation.getter(#currentQuestions),
        returnValue: _FakeRxList_2<_i6.Question>(
          this,
          Invocation.getter(#currentQuestions),
        ),
        returnValueForMissingStub: _FakeRxList_2<_i6.Question>(
          this,
          Invocation.getter(#currentQuestions),
        ),
      ) as _i3.RxList<_i6.Question>);

  @override
  _i3.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onStart),
        ),
        returnValueForMissingStub: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i3.InternalFinalCallback<void>);

  @override
  _i3.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onDelete),
        ),
        returnValueForMissingStub: _FakeInternalFinalCallback_3<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i3.InternalFinalCallback<void>);

  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<List<_i6.Question>> getQuestionsByCurriculum(
          String? curriculumId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuestionsByCurriculum,
          [curriculumId],
        ),
        returnValue: _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
      ) as _i7.Future<List<_i6.Question>>);

  @override
  _i7.Future<List<_i6.Question>> getQuestionsByConcept(String? conceptId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuestionsByConcept,
          [conceptId],
        ),
        returnValue: _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
      ) as _i7.Future<List<_i6.Question>>);

  @override
  _i7.Future<List<_i6.Question>> generateQuiz(_i8.QuizConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateQuiz,
          [config],
        ),
        returnValue: _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
      ) as _i7.Future<List<_i6.Question>>);

  @override
  _i7.Future<List<_i6.Question>> getQuestionsBatch(List<String>? questionIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQuestionsBatch,
          [questionIds],
        ),
        returnValue: _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i6.Question>>.value(<_i6.Question>[]),
      ) as _i7.Future<List<_i6.Question>>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearExpiredCache() => super.noSuchMethod(
        Invocation.method(
          #clearExpiredCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i6.Question> filterQuestions({
    List<int>? difficulties,
    List<_i6.QuestionFormat>? formats,
    String? subject,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterQuestions,
          [],
          {
            #difficulties: difficulties,
            #formats: formats,
            #subject: subject,
          },
        ),
        returnValue: <_i6.Question>[],
        returnValueForMissingStub: <_i6.Question>[],
      ) as List<_i6.Question>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [QuizRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizRepository extends _i1.Mock implements _i9.QuizRepository {
  @override
  _i4.FlutterSecureStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFlutterSecureStorage_4(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFlutterSecureStorage_4(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i4.FlutterSecureStorage);

  @override
  _i7.Future<void> saveSession(_i10.QuizSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [session],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i10.QuizSession?> getSession(String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSession,
          [sessionId],
        ),
        returnValue: _i7.Future<_i10.QuizSession?>.value(),
        returnValueForMissingStub: _i7.Future<_i10.QuizSession?>.value(),
      ) as _i7.Future<_i10.QuizSession?>);

  @override
  _i7.Future<void> deleteSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [sessionId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> saveCurrentSession(_i10.QuizSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrentSession,
          [session],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i10.QuizSession?> getCurrentSession() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSession,
          [],
        ),
        returnValue: _i7.Future<_i10.QuizSession?>.value(),
        returnValueForMissingStub: _i7.Future<_i10.QuizSession?>.value(),
      ) as _i7.Future<_i10.QuizSession?>);

  @override
  _i7.Future<void> clearCurrentSession() => (super.noSuchMethod(
        Invocation.method(
          #clearCurrentSession,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addToHistory(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #addToHistory,
          [sessionId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<String>> getSessionHistory() => (super.noSuchMethod(
        Invocation.method(
          #getSessionHistory,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> clearHistory() => (super.noSuchMethod(
        Invocation.method(
          #clearHistory,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<Map<String, dynamic>> getUserStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getUserStatistics,
          [],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);
}

/// A class which mocks [AnswerValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnswerValidator extends _i1.Mock implements _i11.AnswerValidator {
  @override
  bool validate({
    required _i6.Question? question,
    required dynamic userAnswer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validate,
          [],
          {
            #question: question,
            #userAnswer: userAnswer,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
